-- # PROJETO: Sistema de Gestão de Clínica Médica
-- # ARQUIVO: clinica_medica.sql
-- # DESCRIÇÃO: Script completo para criação, população e manipulação do banco de dados MySQL.

-- 1. CONFIGURAÇÃO E LIMPEZA INICIAL

-- (Correção de Erro 1007) Cria o banco de dados apenas se ele não existir.
CREATE DATABASE IF NOT EXISTS clinica_medica CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Seleciona o banco de dados para uso nas próximas operações.
USE clinica_medica;

-- (Correção de Erro 1050) Exclui as tabelas na ordem inversa de dependência (das filhas para as mães) 
-- para evitar erros de restrição de FOREIGN KEY ao rodar o script novamente.
DROP TABLE IF EXISTS Exame;
DROP TABLE IF EXISTS Receita;
DROP TABLE IF EXISTS Consulta;
DROP TABLE IF EXISTS Medico;
DROP TABLE IF EXISTS Paciente;

-- (Correção de Erro 1175) Desabilita o modo de segurança para permitir UPDATES/DELETES 
-- em colunas não-chave no bloco de testes de manipulação.
SET SQL_SAFE_UPDATES = 0; 

-- 2. CRIAÇÃO DAS TABELAS (Estrutura do DER)

-- 2.1. TABELA PACIENTE (Entidade Forte)
CREATE TABLE Paciente (
    id_paciente INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    data_nascimento DATE NOT NULL,
    sexo CHAR(1), -- M: Masculino, F: Feminino, O: Outro
    telefone VARCHAR(20),
    endereco VARCHAR(255)
);

-- 2.2. TABELA MEDICO (Entidade Forte)
CREATE TABLE Medico (
    id_medico INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    especialidade VARCHAR(100) NOT NULL,
    crm VARCHAR(20) NOT NULL UNIQUE, -- CRM como campo único
    telefone VARCHAR(20)
);

-- 2.3. TABELA CONSULTA (Entidade de Relacionamento N:M entre Paciente e Medico)
CREATE TABLE Consulta (
    id_consulta INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    id_medico INT NOT NULL,
    data_hora DATETIME NOT NULL,
    observacoes TEXT,
    -- Definindo as Relações (FOREIGN KEYs)
    FOREIGN KEY (id_paciente) REFERENCES Paciente(id_paciente),
    FOREIGN KEY (id_medico) REFERENCES Medico(id_medico)
);

-- 2.4. TABELA RECEITA (Entidade Dependente de Consulta)
CREATE TABLE Receita (
    id_receita INT AUTO_INCREMENT PRIMARY KEY,
    id_consulta INT NOT NULL,
    descricao TEXT NOT NULL,
    FOREIGN KEY (id_consulta) REFERENCES Consulta(id_consulta)
);

-- 2.5. TABELA EXAME (Entidade Dependente de Consulta)
CREATE TABLE Exame (
    id_exame INT AUTO_INCREMENT PRIMARY KEY,
    id_consulta INT NOT NULL,
    tipo VARCHAR(100) NOT NULL,
    resultado TEXT,
    FOREIGN KEY (id_consulta) REFERENCES Consulta(id_consulta)
);


-- 3. INSERÇÃO DE DADOS (População de Exemplo)


-- 3.1. INSERÇÃO DE PACIENTES
INSERT INTO Paciente (nome, data_nascimento, sexo, telefone, endereco) VALUES
('Maria Silva', '1985-10-20', 'F', '11987654321', 'Rua A, 100, São Paulo/SP'),
('João Santos', '1992-05-15', 'M', '21998765432', 'Av. B, 50, Rio de Janeiro/RJ'),
('Ana Oliveira', '2000-01-01', 'F', '31976543210', 'Rua C, 200, Belo Horizonte/MG');

-- 3.2. INSERÇÃO DE MÉDICOS
INSERT INTO Medico (nome, especialidade, crm, telefone) VALUES
('Dr. Ana Costa', 'Cardiologia', 'CRM/SP 12345', '1130001111'),
('Dra. Pedro Oliveira', 'Dermatologia', 'CRM/MG 67890', '3130002222'),
('Dr. Laura Mendes', 'Pediatria', 'CRM/RJ 54321', '2130003333');

-- 3.3. INSERÇÃO DE CONSULTAS
INSERT INTO Consulta (id_paciente, id_medico, data_hora, observacoes) VALUES
(1, 1, '2025-09-28 10:00:00', 'Paciente com queixa de palpitações. Solicitado ECG e Teste Ergométrico.'), 
(2, 2, '2025-09-29 14:30:00', 'Revisão de rotina. Lesão de pele controlada.'),
(3, 3, '2025-09-29 16:00:00', 'Consulta de acompanhamento pediátrico. Sem intercorrências.');

-- 3.4. INSERÇÃO DE RECEITAS
INSERT INTO Receita (id_consulta, descricao) VALUES
(1, 'Atenolol 25mg - 1x ao dia por 30 dias.'),
(2, 'Pomada Tópica de Corticoide - aplicar na área afetada 2x ao dia.');

-- 3.5. INSERÇÃO DE EXAMES
INSERT INTO Exame (id_consulta, tipo, resultado) VALUES
(1, 'Eletrocardiograma (ECG)', 'Resultado normal, sem alterações.'),
(1, 'Teste Ergométrico', NULL), 
(2, 'Hemograma Completo', 'Aguardando resultado.');



-- 4. MANIPULAÇÃO DE DADOS (SELECTs e UPDATEs)

-- 4.1. UPDATE: Atualiza o resultado de um exame pendente (Teste Ergométrico)
UPDATE Exame
SET resultado = 'Teste positivo para isquemia. Necessário acompanhamento.'
WHERE id_exame = 2; 

-- 4.2. UPDATE: Atualiza os dados de contato do paciente 'João Santos'
UPDATE Paciente
SET 
    telefone = '21999990000', 
    endereco = 'Rua Nova, 500, Rio de Janeiro/RJ'
WHERE 
    nome = 'João Santos';

-- 4.3. SELECT: Buscar histórico de consultas com nomes de paciente e médico
SELECT
    P.nome AS Paciente,
    M.nome AS Medico,
    M.especialidade,
    C.data_hora
FROM
    Consulta C
JOIN Paciente P ON C.id_paciente = P.id_paciente
JOIN Medico M ON C.id_medico = M.id_medico
ORDER BY C.data_hora DESC;

-- 4.4. SELECT: Listar todos os exames e suas receitas relacionadas a uma consulta específica
SELECT
    C.data_hora AS Data_Consulta,
    E.tipo AS Exame,
    R.descricao AS Receita_Prescrita
FROM
    Consulta C
LEFT JOIN Exame E ON C.id_consulta = E.id_consulta
LEFT JOIN Receita R ON C.id_consulta = R.id_consulta
WHERE
    C.id_consulta = 1;


-- 5. CONFIGURAÇÃO FINAL (OPCIONAL)

-- (Opcional) Reabilita o modo de segurança do MySQL 
SET SQL_SAFE_UPDATES = 1;
